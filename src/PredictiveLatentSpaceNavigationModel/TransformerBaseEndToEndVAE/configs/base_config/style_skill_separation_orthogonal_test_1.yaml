# Skill-Style Separation VAE Training Configuration

experiment:
  name: "style_skill_separation_model_skill_manifold_test"
  description: "スキル指標を用いたスタイル・スキル分離VAE学習実験 - 熟達多様体形成"
  priority: 1
  tags: ["skill_metrics", "style_separation", "prototype_classification", "transformer_vae"]
  dependencies: []

# モデル設定
model:
  class_name: "StyleSkillSeparationNet"
  file_path: "PredictiveLatentSpaceNavigationModel/TransformerBaseEndToEndVAE/models/style_skill_separation_model.py"
  
  # 基本パラメータ
  input_dim: 6  # HandlePos, Vel, Acc (x,y)
  seq_len: 100  # target_seq_len from preprocessing
  d_model: 256  # CLAUDE_ADDED: 768から512に縮小してNaN回避
  n_heads: 8
  n_encoder_layers: 6
  n_decoder_layers: 6
  dropout: 0.1

  # 潜在空間次元
  style_latent_dim: 12
  skill_latent_dim: 12

  # 被験者数 (学習データの被験者数)
  n_subjects: 6  # 要確認: 実際のデータに合わせて調整
  
  # 損失重み
  loss_schedule_config:
    beta_style:  # スタイル空間専用のKL損失
      schedule: 'linear'
      start_epoch: 40
      end_epoch: 70
      start_val: 0.0
      end_val: 0.0001
    beta_skill:  # スキル空間専用のKL損失（より弱く）
      schedule: 'linear'
      start_epoch: 40
      end_epoch: 70
      start_val: 0.0
      end_val: 0.0001
    orthogonal_loss:
      schedule: 'linear'
      start_epoch: 81
      end_epoch: 110
      start_val: 0.0
      end_val: 0.1
    contrastive_loss:
      schedule: 'linear'
      start_epoch: 111
      end_epoch: 130
      start_val: 0.0
      end_val: 0.25
    manifold_loss:
      schedule: 'linear'
      start_epoch: 131
      end_epoch: 150
      start_val: 0.0
      end_val: 0.5
#    style_classification_loss:
#      schedule: 'linear'
#      start_epoch: 151
#      end_epoch: 170
#      start_val: 0.0
#      end_val: 0.5
#    skill_regression_loss:
#      schedule: 'linear'
#      start_epoch: 161
#      end_epoch: 170
#      start_val: 0.0
#      end_val: 0.5

# 学習設定
training:
  num_epochs: 200
  batch_size: 16
  learning_rate: 0.00005  # CLAUDE_ADDED: より小さな学習率でNaN回避
  weight_decay: 0.00005
  gradient_clip_norm: 1.0  # CLAUDE_ADDED: グラディエントクリッピング追加
  
  optimizer: "AdamW"
  scheduler: "CosineAnnealingWarmRestarts"
  scheduler_T_0: 25
  scheduler_T_mult: 2
  scheduler_eta_min: 0.000005
  
  # 早期停止
  early_stopping: true
  patience: 60
  min_delta: 0.0005
  monitor: "val_total_loss"
  mode: "min"
  restore_best_weights: true
  
  # モデル保存
  save_best_model: false
  save_checkpoints: false
  checkpoint_interval: 20
  verbose: true

# データ設定
data:
  type: "skill_metrics"  # 新しいスキル指標データセット
  data_path: "PredictiveLatentSpaceNavigationModel/DataPreprocess/AnalysisResults/Dataset_Generation_Test_20250908_193217/dataset"  # analyze_skill_metrics.pyで生成されたデータセットパスを指定（修正済み）
  val_split: 0.2  # 学習データを更に分割して検証用に使用
  random_seed: 42
  
  # DataLoader設定
  num_workers: 2
  pin_memory: true
  shuffle: true

# 評価設定
evaluation:
  # ベースライン評価器
  trajectory_generation_analysis: True
  style_skill_orthogonality_analysis: True

  # スタイル空間評価器
  visualize_style_space_analysis: True
  style_component: 3
  style_clustering_analysis: True
  style_classification_analysis: True

  # スキル空間評価器
  visualize_skill_space_analysis: True
  visualize_KDE: True
  skill_component: 2
  skill_score_regression_analysis: True
  skill_latent_dimension_vs_score_analysis: True
  
  # 可視化
  create_plots: true
  save_trajectories: true
  generate_examples: true

# 出力設定
output:
  base_dir: "PredictiveLatentSpaceNavigationModel/TransformerBaseEndToEndVAE/outputs"
  experiment_subdir: true  # 実験名でサブディレクトリ作成
  
  save_model: true
  save_embeddings: true
  save_predictions: true
  create_report: true
  
  # ログ設定
  log_level: "INFO"
  tensorboard: false
  wandb: false

# システム設定
system:
  device: "auto"  # "cuda", "cpu", "auto"
  mixed_precision: false  # 初期は無効化（安定性優先）
  deterministic: true
  benchmark: false
  
  # メモリ最適化
  dataloader_workers: 2
  pin_memory: true
  
  # デバッグ設定
  debug_mode: false
  profile_training: false

# 注意事項とメモ
# 1. data_pathは analyze_skill_metrics.py の実行結果パスに更新済み
# 2. n_subjects は実際の学習データの被験者数に合わせて調整してください  
# 3. seq_len は data_preprocess_default_config.yaml の target_seq_len と一致させてください
# 4. プロトタイプベース分類により、テスト時の未知被験者にも対応できます
# 5. 重要な設定は全て適切なセクション(model, training, system)に配置済み